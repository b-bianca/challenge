// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	model "github.com/b-bianca/melichallenge/notify-api/adapter/model"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Pulling is an autogenerated mock type for the pulling type
type Pulling struct {
	mock.Mock
}

// Pulling provides a mock function with given fields: url, interval
func (_m *Pulling) Pulling(url string, interval time.Duration) (*model.NotificationListResponse, error) {
	ret := _m.Called(url, interval)

	var r0 *model.NotificationListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, time.Duration) (*model.NotificationListResponse, error)); ok {
		return rf(url, interval)
	}
	if rf, ok := ret.Get(0).(func(string, time.Duration) *model.NotificationListResponse); ok {
		r0 = rf(url, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.NotificationListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, time.Duration) error); ok {
		r1 = rf(url, interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPulling creates a new instance of Pulling. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPulling(t interface {
	mock.TestingT
	Cleanup(func())
}) *Pulling {
	mock := &Pulling{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
